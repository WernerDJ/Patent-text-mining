#
# https://www.data-to-viz.com/graph/sankey.html
#
library(tidyverse)
library(viridis)
library(patchwork)
library(hrbrthemes)
library(circlize)
library(purrr)
library(networkD3)
#
#
Maxnum <- 50
x <- integer(0)
db <- db2
db$Current.assignees <- db$Ã¯..Current.assignees
templist <- map(strsplit(db$Current.assignees, "\n"),1)
templist[sapply(templist, is.null)] <- NA
db$Asingnee <- unlist(templist)
Nodes <- names(summary(as.factor(db$Asingnee))[1:Maxnum])
#
#
for (n in 1:as.integer((Maxnum)/1.5)) {
    y <- grep(Nodes[n], Nodes[(n+1):Maxnum])+n
    ifelse(identical(x, y), next, Nodes <- Nodes[-y])
}

revNodes <- rev(Nodes)
limit <- length(revNodes)
for (n in 1:(limit-2)) {
    y <- grep(revNodes[n], revNodes[(n+1):limit])+n
	print(paste(y, n, revNodes[n]))
    ifelse(identical(x, y), next, revNodes <- revNodes[-y])
}
Nodes <- rev(revNodes)
Edges <- data.frame(Source="", Target="", Type="Undirected", Weight="")
#
#
for (n in 1:(length(Nodes)-1)) {
    Inventors01<- substr(unique(unlist(strsplit(db[grep(Nodes[n] , db$Asingnee),3], "\n"))),1, 15)
    for (m in (n+1):(length(Nodes)-1)) {
	weight <- 0
	#for (m in (n+1):(n+1)) {
        Inventors02<- substr(unique(unlist(strsplit(db[grep(Nodes[m] , db$Asingnee),3], "\n"))),1, 15)
        for (Inventor in Inventors01) {
            weight <- weight + length(grep(Inventor, Inventors02))
        }
		newedge <- data.frame(Source=n, Target =m, Type="Undirected", Weight=weight)
		Edges<- rbind(Edges, newedge)
		}}
#
#
Matrix <- data.frame(Source="", Target="", Weight="")
for (n in 1:(length(Nodes)-2)) {
    Inventors01<- substr(unique(unlist(strsplit(db[grep(Nodes[n] , db$Asingnee),3], "\n"))),1,15)
    for (m in (n+1):(length(Nodes)-1)) {
	weight <- 0
	#for (m in (n+1):(n+1)) {
        Inventors02<- substr(unique(unlist(strsplit(db[grep(Nodes[m] , db$Asingnee),3], "\n"))),1,15)
        for (Inventor in Inventors01) {
            weight <- weight + length(grep(Inventor, Inventors02))
        }
		newedge <- data.frame(Source=Nodes[n], Target =Nodes[m], Weight=weight)
		Matrix<- rbind(Matrix, newedge)
		}}	

cleanMatrix <- subset(Matrix, Weight > 0)
nodes <- data.frame(name=c(as.character(cleanMatrix$Source), as.character(cleanMatrix$Target)) %>% unique())
cleanMatrix$IDsource=match(cleanMatrix$Source, nodes$name)-1 
cleanMatrix$IDtarget=match(cleanMatrix$Target, nodes$name)-1
ColourScal ='d3.scaleOrdinal() .range(["#FDE725FF","#B4DE2CFF","#6DCD59FF","#35B779FF","#1F9E89FF","#26828EFF","#31688EFF","#3E4A89FF","#482878FF","#440154FF"])'
# Make the Network
sankeyNetwork(Links = cleanMatrix, Nodes = nodes,
                     Source = "IDsource", Target = "IDtarget",
                     Value = "Weight", NodeID = "name", 
                     sinksRight=FALSE, colourScale=ColourScal, nodeWidth=40, fontSize=13, nodePadding=20)




















CircleMatrix <- data.frame(NewMatrix[-1])
row.names(CircleMatrix) <- NewMatrix[,1]
CircleMatrix <- CircleMatrix[1:6]
rownames(CircleMatrix)<- substr(rownames(CircleMatrix), 1, 10)
colnames(CircleMatrix)<- substr(colnames(CircleMatrix), 1, 10)

chordDiagram(CircleMatrix, transparency = 0.5)


grid.col <- setNames(rainbow(length(unlist(dimnames(CircleMatrix)))), union(rownames(CircleMatrix), colnames(CircleMatrix)))
par(mar = c(0, 0, 0, 0), mfrow = c(1, 2))
chordDiagram(CircleMatrix, annotationTrack = "grid", preAllocateTracks = 1, grid.col = grid.col)
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
  xlim = get.cell.meta.data("xlim")
  ylim = get.cell.meta.data("ylim")
  sector.name = get.cell.meta.data("sector.index")
  circos.text(mean(xlim), ylim[1] + .1, sector.name, facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
  circos.axis(h = "top", labels.cex = 0.5, major.tick.percentage = 0.2, sector.index = sector.name, track.index = 2)
}, bg.border = NA)
